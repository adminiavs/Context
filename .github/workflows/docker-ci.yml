name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test all Docker images
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [base, development, build, production, testing, documentation, ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.target }},enable=true

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Run comprehensive tests
  test:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build testing image
      run: |
        docker build --target testing -t ragger:testing .

    - name: Run unit tests
      run: |
        docker run --rm ragger:testing ./bin/ragger-tests

    - name: Run benchmarks
      run: |
        docker run --rm -v $(pwd)/benchmark_results:/workspace/benchmark_results ragger:testing \
          ./bin/ragger-benchmarks --benchmark_format=json --benchmark_out=/workspace/benchmark_results/results.json

    - name: Run static analysis
      run: |
        docker run --rm ragger:testing cppcheck --enable=all --inconclusive --std=c++17 /workspace/src/

    - name: Run memory tests
      run: |
        docker run --rm ragger:testing valgrind --leak-check=full --show-leak-kinds=all ./bin/ragger-tests

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          benchmark_results/
          test_results/

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      run: |
        docker build --target production -t ragger:production .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ragger:production'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build testing image
      run: |
        docker build --target testing -t ragger:testing .

    - name: Run performance tests
      run: |
        docker run --rm -v $(pwd)/performance_results:/workspace/performance_results ragger:testing \
          ./bin/ragger-benchmarks --benchmark_format=json --benchmark_out=/workspace/performance_results/performance.json

    - name: Analyze performance results
      run: |
        echo "Performance test results:"
        cat performance_results/performance.json | jq '.benchmarks[] | {name: .name, real_time: .real_time, cpu_time: .cpu_time}'

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance_results/

  # Documentation generation
  docs:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build documentation image
      run: |
        docker build --target documentation -t ragger:documentation .

    - name: Generate documentation
      run: |
        docker run --rm -v $(pwd)/docs/generated:/workspace/docs/generated ragger:documentation \
          /bin/bash -c "cd /workspace && make docs"

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/generated/

  # Integration testing
  integration:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      run: |
        docker build --target production -t ragger:production .

    - name: Start production container
      run: |
        docker run -d --name ragger-prod -p 8080:8080 ragger:production

    - name: Wait for container to be ready
      run: |
        timeout 60 bash -c 'until docker exec ragger-prod /app/bin/ragger-console --version; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Test basic functionality
        docker exec ragger-prod /app/bin/ragger-console --version
        docker exec ragger-prod /app/bin/ragger --help
        
        # Test health check
        docker exec ragger-prod /app/scripts/docker/health-check.sh

    - name: Stop production container
      run: |
        docker stop ragger-prod
        docker rm ragger-prod

  # Multi-platform build
  multi-platform:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Build and push multi-platform image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, using kubectl, docker-compose, or other deployment tools

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, integration, multi-platform]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example, using kubectl, docker-compose, or other deployment tools

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, integration]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.integration.result == 'success'
      run: |
        echo "✅ All tests passed! RAGger is ready for deployment."

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.integration.result == 'failure'
      run: |
        echo "❌ Some tests failed. Please check the logs and fix the issues."
        exit 1
